library(readr)
annual_generation_state <- read_csv("annual_generation_state.csv")
View(annual_generation_state)
View(annual_generation_state)
library(readr)
View(pruned_set)
pruned_set <- annual_generation_state[annual_generation_state$`TYPE OF PRODUCER`=='Total Electric Power Industry' & annual_generation_state$`ENERGY SOURCE`=='Total',]
View(pruned_set)/
View(pruned_set)
test$`ENERGY SOURCE`[test$`ENERGY SOURCE`=="Hydroelectric Conventional"]  <- "Hydro"
test <- fresh_data
fresh_data <- annual_generation_state[annual_generation_state$`GENERATION (Megawatthours)` >= 0  & complete.cases(annual_generation_state), ]
library(readr)
annual_generation_state <- read_csv("annual_generation_state.csv")
#View(annual_generation_state)
#cleaned data set:
fresh_data <- annual_generation_state[annual_generation_state$`GENERATION (Megawatthours)` >= 0  & complete.cases(annual_generation_state), ]
fresh_data$STATE = toupper(fresh_data$STATE)
fresh_data <- fresh_data[!grepl('Other', fresh_data$`ENERGY SOURCE`),]
fresh_data <- fresh_data[!grepl('Pumped Storage', fresh_data$`ENERGY SOURCE`),]
test <- fresh_data
test$`ENERGY SOURCE`[test$`ENERGY SOURCE`=="Hydroelectric Conventional"]  <- "Hydro"
test$`ENERGY SOURCE`[test$`ENERGY SOURCE`=="Wood and Wood Derived Fuels"]  <- "Wood"
test$`ENERGY SOURCE`[test$`ENERGY SOURCE`=="Solar Thermal and Photovoltaic"]  <- "Solar"
test$`GENERATION (Megawatthours)` <- as.numeric(test$`GENERATION (Megawatthours)`)
test$`STATE` <- as.factor(test$`STATE`)
test$`TYPE OF PRODUCER` <- as.factor(test$`TYPE OF PRODUCER`)
test$`ENERGY SOURCE` <- as.factor(test$`ENERGY SOURCE`)
View(test)
class(test$`ENERGY SOURCE`[1])
unique(test$`STATE`)
install.packages("png", lib="C:/Users/Vivek/Anaconda3/envs/r-env/Lib/R/library")
shiny::runApp()
runApp()
runApp()
clear()
clear
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
finalized_data$`ENERGY SOURCE` <- as.factor(finalized_data$`ENERGY SOURCE`)
finalized_data$`ENERGY SOURCE` <- as.factor(finalized_data$`ENERGY SOURCE`)
library(readr)
library(ggplot2)
library(readr)
library(ggplot2)
data <- read_csv("annual_generation_state.csv")
#Remove -watt hour data and incomplete/missing data
cleaned_data <- annual_generation_state[annual_generation_state$`GENERATION (Megawatthours)` >= 0  & complete.cases(annual_generation_state), ]
#capitalize the US_Total format
cleaned_data$STATE = toupper(cleaned_data$STATE)
#remove data related to other energy sources such as pumped storage and other storage
cleaned_data <- cleaned_data[!grepl('Other', cleaned_data$`ENERGY SOURCE`),]
cleaned_data <- cleaned_data[!grepl('Pumped Storage', cleaned_data$`ENERGY SOURCE`),]
#final portions of data: replace long names with short names for certain energy and convert data types
finalized_data<-cleaned_data
finalized_data$`ENERGY SOURCE`[finalized_data$`ENERGY SOURCE`=="Hydroelectric Conventional"]  <- "Hydro"
finalized_data$`ENERGY SOURCE`[finalized_data$`ENERGY SOURCE`=="Wood and Wood Derived Fuels"]  <- "Wood"
finalized_data$`ENERGY SOURCE`[finalized_data$`ENERGY SOURCE`=="Solar Thermal and Photovoltaic"]  <- "Solar"
finalized_data$`GENERATION (Megawatthours)` <- as.numeric(finalized_data$`GENERATION (Megawatthours)`)
finalized_data$`STATE` <- as.factor(finalized_data$`STATE`)
finalized_data$`TYPE OF PRODUCER` <- as.factor(finalized_data$`TYPE OF PRODUCER`)
finalized_data$`ENERGY SOURCE` <- as.factor(finalized_data$`ENERGY SOURCE`)
nrow(finalized_data)
US_Total_data <- finalized_data[c(-2, -3)]
nrow(US_Total_data)
nrow(annual_generation_state)
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp()
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp()
runApp('playaround')
runApp('playaround')
runApp('C:/Users/Vivek/UIC/CS 424/Week 5')
runApp()
runApp()
runApp('playaround')
getwd()
runApp('playaround')
runApp('playaround')
runApp('C:/Users/Vivek/UIC/CS 424/Week 5')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
output$State1_Line_Percent <- renderPlot({
ggplot(US_Total_data, aes(x = YEAR, y = Percent, color = `ENERGY SOURCE`)) +
geom_line() +
xlab("\nYEAR") +
ylab("GENERATION (Megawatthours) %\n") +
labs(fill="ENERGY SOURCE")
})
runApp('Test_Stage_For_2')
runApp('Test_Stage_For_2')
runApp('Test_Stage_For_2')
runApp()
library(usmap)
install.packages("usmap")
install.packages("usmap")
library(usmap)
state.name('IL')
state.abb[grep("New York", state.name)]
state.name[grep("DC", state.abb)]
state.name[grep("IL", state.abb)]
runApp('Test_Stage_For_2')
\
runApp('C:/Users/Vivek/UIC/CS 424/Week 5')
runApp()
runApp()
runApp()
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp('playaround')
runApp()
runApp('playaround')
runApp('playaround')
runApp()
runApp('playaround')
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp('playaround')
runApp()
runApp()
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp()
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('playaround')
runApp('C:/Users/Vivek/UIC/CS 424/Week 5')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
